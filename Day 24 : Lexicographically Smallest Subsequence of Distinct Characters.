import java.util.*;

public class Solution {
    public static String smallestSubsequence(int n, String s) {
        Stack<Character> stack = new Stack<>();
        Set<Character> seen = new HashSet<>();
        Map<Character, Integer> lastOccurrence = new HashMap<>();
        
        for (int i = 0; i < s.length(); i++) {
            lastOccurrence.put(s.charAt(i), i);
        }
        
        for (int i = 0; i < s.length(); i++) {
            char c = s.charAt(i);
            
            if (seen.contains(c)) {
                continue;
            }
            
            while (!stack.isEmpty() && c < stack.peek() && i < lastOccurrence.get(stack.peek())) {
                seen.remove(stack.pop());
            }
            
            stack.push(c);
            seen.add(c);
        }
        
        StringBuilder result = new StringBuilder();
        for (char c : stack) {
            result.append(c);
        }
        
        return result.toString();
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        int testCases = scanner.nextInt();
        while (testCases > 0) {
            int n = scanner.nextInt();
            String s = scanner.next();
            String subsequence = smallestSubsequence(n, s);
            System.out.println(subsequence);
            testCases--;
        }
        scanner.close();
    }
}
